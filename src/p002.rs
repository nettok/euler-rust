//! Even Fibonacci numbers
//! Problem 2
//!
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//! By starting with 1 and 2, the first 10 terms will be:
//! 
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//! find the sum of the even-valued terms.

mod fibonacci {
    pub struct Fibonacci {
        current: usize,
        next:    usize
    }

    impl Fibonacci {
        pub fn new() -> Fibonacci {
            Fibonacci { current: 0, next: 1 }
        }
    }

    impl Iterator for Fibonacci {
        type Item = usize;

        fn next(&mut self) -> Option<usize> {
            let old_current = self.current;
            self.current = self.next;
            self.next = old_current + self.next;
            Some(old_current)
        }
    }
}

use self::fibonacci::*;

fn solve(below: usize) -> usize {
    Fibonacci::new()
        .filter(|x| x % 2 == 0)
        .take_while(|x| x <= &below)
        .sum()
}

#[cfg(test)]
mod tests {
    use super::fibonacci::*;

    #[test]
    fn fibs() {
        assert_eq!(
            vec![0, 1, 1, 2, 3, 5, 8, 13, 21, 34],
            Fibonacci::new().take(10).collect::<Vec<_>>());
    }

    #[test]
    fn solve() {
        assert_eq!(4613732, super::solve(4_000_000));
    }
}